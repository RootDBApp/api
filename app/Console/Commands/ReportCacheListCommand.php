<?php

namespace App\Console\Commands;

use App\Models\CacheJob;
use App\Models\ReportCache;
use App\Models\Report;
use App\Models\ReportDataView;
use App\Tools\CacheReportTools;
use App\Tools\ReportTools;
use App\Tools\Tools;
use Exception;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Cache;

class ReportCacheListCommand extends Command
{
    protected $signature = 'report:list-cache';
    protected $description = 'List all reports with results in cache.';

    /**
     * @throws Exception
     */
    public function handle(): void
    {

        $this->line('|----------------------------------------------|');
        $this->line('| Cache generated by users                     |');
        $this->line('|----------------------------------------------|');
        $rows = [];


        /** @var ReportCache $cacheReport */
        foreach (ReportCache::with(['report', 'reportDataView'])
            ->where('cache_key', 'LIKE', 'crjdvk-0-%')
            ->orderBy('report_id')
            ->orderBy('report_data_view_id')
            ->get() as $cacheReport) {

            $this->getDataViewResultStats($cacheReport->report, $cacheReport->reportDataView, $cacheReport->cache_key, $rows);
        }

        if (count($rows) > 0) {

            $this->table(['Report ID', 'Report name', 'Parameters', 'Data view ID', 'Data view name', 'Nb rows', 'Memory', 'Key', '#'], $rows);
        } else {

            $this->info('Nothing.');
        }

        $this->line('');
        $this->line('');
        $this->line('|----------------------------------------------|');
        $this->line('| Cache generated by cache jobs                |');
        $this->line('|----------------------------------------------|');
        $rows = [];

        /** @var CacheJob $cacheJob */
        foreach (CacheJob::with(['cacheJobParameterSetConfigs', 'report', 'report.dataViews'])->where('activated', '=', 1)->get() as $cacheJob) {

            foreach ($cacheJob->report->dataViews as $dataView) {

                if ($cacheJob->getAllCacheJobParameterSets()->count() === 0) {

                    $this->getDataViewResultStatsFromCacheJob($cacheJob, $dataView, CacheReportTools::getDataViewKeyWithCacheJob($cacheJob, $dataView, []), $rows);

                } else {

                    foreach ($cacheJob->getAllCacheJobParameterSets() as $cacheJobParameterSets) {

                        foreach ($cacheJobParameterSets->getAllParametersSets() as $parametersSets) {

                            $this->getDataViewResultStatsFromCacheJob($cacheJob, $dataView, CacheReportTools::getDataViewKeyWithCacheJob($cacheJob, $dataView, $parametersSets), $rows);
                        }
                    }
                }
            }
        }

        ksort($rows);

        $current_cache_job_id = 0;
        $cache_job_parameter_set_num = 1;
        foreach ($rows as $data_view_key => $row) {

            if ($row[0] !== $current_cache_job_id) {

                $cache_job_parameter_set_num = 1;
                $current_cache_job_id = $row[0];
            }

            $rows[$data_view_key][] = $cache_job_parameter_set_num++;
        }

        if (count($rows) > 0) {

            $this->table(['Job ID', 'Report ID', 'Report name', 'Parameters', 'Data view ID', 'Data view name', 'Nb rows', 'Memory', 'Key', '#'], $rows);
        } else {

            $this->info('Nothing.');
        }

    }


    private function getDataViewResultStats(Report $report, ReportDataView $dataView, string $data_view_key, &$rows): void
    {
        $dataViewResults = Cache::tags(CacheReportTools::CACHE_REFRESH_JOB_DATA_VIEW_TAGS)->get($data_view_key);

        if (!is_null($dataViewResults)) {

            $reportParameters = Cache::tags(CacheReportTools::CACHE_REFRESH_JOB_REPORT_PARAMETERS_TAGS)
                ->get(
                    str_replace(
                        CacheReportTools::CACHE_REFRESH_JOB_DATA_VIEW_KEY_PREFIX,
                        CacheReportTools::CACHE_REFRESH_JOB_REPORT_PARAMETERS_KEY_PREFIX,
                        $data_view_key
                    )
                );

            $initialMemoryUsage = memory_get_usage();
            $dummyCopy = Tools::recCopy($dataViewResults);
            $newMemoryUsage = memory_get_usage();
            $itemSizeInBytes = abs($newMemoryUsage - $initialMemoryUsage);
            unset($dummyCopy);

            $rows[$data_view_key] = [
                $report->id,
                $report->name,
                ReportTools::flattenInputParameters((array)json_decode($reportParameters)),
                $dataView->id,
                $dataView->name,
                count($dataViewResults),
                Tools::formatBytes($itemSizeInBytes),
                $data_view_key
            ];
        }
    }

    private function getDataViewResultStatsFromCacheJob(CacheJob $cacheJob, ReportDataView $dataView, string $data_view_key, &$rows): void
    {
        $dataViewResults = Cache::tags(CacheReportTools::CACHE_REFRESH_JOB_DATA_VIEW_TAGS)->get($data_view_key);
        if (!is_null($dataViewResults)) {

            $cacheJobDataViewKey = CacheReportTools::getCacheJobDataViewKeyFromMemcacheKey($data_view_key);
            if (is_null($cacheJobDataViewKey)) {

                return;
            }

            $reportParameters = Cache::tags(CacheReportTools::CACHE_REFRESH_JOB_REPORT_PARAMETERS_TAGS)
                ->get(
                    str_replace(
                        CacheReportTools::CACHE_REFRESH_JOB_DATA_VIEW_KEY_PREFIX,
                        CacheReportTools::CACHE_REFRESH_JOB_REPORT_PARAMETERS_KEY_PREFIX,
                        $data_view_key
                    )
                );

            $initialMemoryUsage = memory_get_usage();
            $dummyCopy = Tools::recCopy($dataViewResults);
            $newMemoryUsage = memory_get_usage();
            $itemSizeInBytes = abs($newMemoryUsage - $initialMemoryUsage);
            unset($dummyCopy);

            $rows[$data_view_key] = [
                $cacheJobDataViewKey->job_id,
                $cacheJobDataViewKey->report_id,
                $cacheJob->report->name,
                ReportTools::flattenInputParameters(json_decode($reportParameters)),
                $cacheJobDataViewKey->data_view_id,
                $dataView->name,
                count($dataViewResults),
                Tools::formatBytes($itemSizeInBytes),
                $data_view_key
            ];
        }
    }
}

